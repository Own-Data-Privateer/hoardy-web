* What?
=pWebArc= (Personal Private Passive Web Archive) is a browser extension that passively collects and archives dumps of HTTP requests and responses to your own private archiving server (like [[https://github.com/Own-Data-Privateer/pwebarc/tree/master/dumb_server/][the dumb archiving server]], also [[https://oxij.org/software/pwebarc/tree/master/dumb_server/][there]]) as you browse the web.
** Glossary
- A /reqres/ (/REQuest/ + /RESponse/) is a pWebArc-internal object containing information about an HTTP request and its response, including their headers and data, and some meta-information (whether it originates from an extension, =tabId= it originates from, its state, etc).
* General operation
** State Diagram
Reqres change their internal states according to the following state diagram (which is explained below):

#+BEGIN_SRC
(start) -> (request sent) -> (nIO) -> (headers received) -> (nIO) --> (body recived)
   |                           |                              |             |
   |                           v                              v             v
   |                     (no_response)                   (incomplete)   (complete)
   |                           |                              |             |
   |                           \                              |             |
   |\---> (canceled) -----\     \                             |             |
   |                       \     \                            \             |
   |                        \     \                            \            v
   |\-> (incomplete_fc) ----->----->---------------------------->-----> (finished)
   |                        /                                            /  |
   |                       /                                      /-----/   |
   \--> (complete_fc) ----/        /--------------- (picked) <---/          v
                                   |                   |                (dropped)
                                   v                   v                 /  |
       (archived) <- (sIO) <- (collected) <------- (in_limbo) <---------/   |
                       |           ^                   |                    |
                       |           |                   |                    |
                /------/           \-----\             \--> (discarded) <---/
                |                        |
                \-> (failed to archive) -/
#+END_SRC
** Step 1: Tracking
pWebArc attaches to browser's runtime and tracks progress of HTTP requests and their responses, saving both their request and response headers and data at appropriate times in the browser's request and response processing pipeline.

Whether pWebArc will track a given request depends on the "Track new reqres" toggles (or checkboxes, if you are using a browser without support for the needed CSS) in the settings popup (also displayed on the right here), e.g:

- [[./popup.html#div-config.collecting][this toggle]] allows you to disable tracking of newly spawned HTTP requests globally, thus essentially disabling pWebArc,
- [[./popup.html#div-tabconfig.collecting][this one]] controls whether pWebArc will track new reqres originating from the currently active tab,
- [[./popup.html#div-tabconfig.children.collecting][this one]] controls whether it will track new reqres originating from new tabs opened from the currently active tab (aka "children tabs", e.g. via middle mouse click, context menu, etc),
- while [[./popup.html#div-config.root.collecting][this one]] controls whether it will track new reqres originating from new tabs opened via browser's "New Tab" browser action (i.e. the plus sign in the tab bar, =Control+T=, menu item, etc),
- and so forth for the others (press "?" symbols to see a tooltip explaining what each of them does).

Disabling any of these toggles does not stop tracking of already initiated requests, it only stops new requests controlled by that toggle from being tracked.
*** The networking states of the State Diagram
As shown on the above diagram, a new reqres proceeds through the following networking states:

- =start=: the starting state;
- =request sent=, =headers received=, (response) =body recived=: normal HTTP request stages (=webRequest= API stages);
- =nIO=: normal network IO performed by the browser in between HTTP request stages;
- =canceled=: request was canceled before it was sent (by you; by the browser itself, e.g. when rewriting an =http://= URL to an =https://= URL in HTTPS-only mode; by an ad-blocking extension like "uBlock Origin"; etc);
- =no_response=: request was sent, but no response was received (connection to the server was rejected; you canceled it manually via the "Stop" button before it got a response; the server decided to ignore the request completely; network timeout was reached; etc);
- =incomplete=: request was sent, response headers were received, but then the loading was interrupted before all of the response body was received;
- =incomplete_fc=: only on Firefox-based browsers: the browser loaded the response data of this reqres directly from its cache, but did not give it to pWebArc; this is just how Firefox handles things sometimes (usually, for images); this is a separate state, because usually this means this URL was successfully archived before (if it was not, reload the page with =Control+F5=);
- =complete=: request was completed successfully;
- =complete_fc=: request was completed successfully from browser's cache;
- =finished=: the terminal state of this step, no new events for this reqres will come from the browser (=webRequest= API);

In principle, at reaching =finished= state the reqres can be serialized and saved to disk, but pWebArc provides more states and UI for convenience.
*** Glossary
- [[./popup.html#div-stats.in_flight][An /in-flight reqres/]] is a reqres that did not reach the =finished= state yet, in the UI such reqres will be shown to be in =in_flight= state.
  If some reqres get stuck in one of the =in_flight= states, the UI has buttons ([[./popup.html#stopAllInFlight][this one]] in the popup) to force them out of the current state as if an error occurred.
- A /finished reqres/ is a reqres that reached the =finished= state, /the final networking state/ is the last state before =finished= (i.e. =complete=, =incomplete=, etc).
** Step 2: Classification
On reaching the =finished= state, pWebArc performs reqres classification.
*** Glossary
Displayed on the [[./popup.html#div-stats.picked][Picked/Dropped reqres]] line:

- [[./popup.html#stats.picked][A /picked reqres/]] is a /finished reqres/ that satisfied the conditions controlled by [[./popup.html#pick-options]["Pick reqres for archival when they finish" settings]] on entering the =finished= state.
- [[./popup.html#stats.dropped][A /dropped reqres/]] is a /finished reqres/ that did /NOT/ satisfy the conditions controlled by [[./popup.html#pick-options]["Pick reqres for archival when they finish" settings]] on entering the =finished= state.

On its own line:

- [[./popup.html#div-stats.problematic][A /problematic reqres/]] is a /finished reqres/ that satisfies the conditions set by [[./popup.html#problematic-options]["Mark reqres as problematic when they finish" settings]].
  Note that /problematic/ is a status flag, not a state.

  /Problematic/ reqres status is separate from all other statuses and states and does not influence archival.
  It exists because, normally, browsers provide no indication when some parts of the page failed to load properly --- they expect you to actually look at the page with your eyes to notice something looking broken (and reload it manually) instead --- which is not a proper way to do this when you want to be sure that the whole page with all its resources was archived, as some of the incompletely loaded parts of the page might be invisible.

  And so, to provide such an indicator, pWebArc keeps the log of /problematic/ reqres and displays the number of elements in the log in its toolbar button's (=browserAction='s) badge.

  By default, HTTP requests that failed to get a response, those that have incomplete response bodies, and those for which the browser reported potentially /problematic errors/ but then pWebArc /picked/ them anyway, will be marked as /problematic/.

  /Problematic errors/ are errors like

  - "fetching of this request's data was aborted because this whole request was aborted, for instance, because the JavaScript making it decided to cancel it as no longer relevant when you moved your mouse cursor away from an interactive video thumbnail it was needed for",
  - and similar things that probably imply some part of the page was left unfetched,

  but NOT errors like

  - "fetching of this request's data was aborted because it was redirected by the server",
  - "the browser decided against rendering of this data",
  - and similar errors where the data was properly fetched.

  The raw error strings reported by the browser for each reqres can be seen in the [[./popup.html#showState][recent reqres history log]].

  If [[./popup.html#div-config.problematicNotify][this option]] is enabled pWebArc will generate a desktop notification each time a new /problematic reqres/ get produced.
  If you don't care about the /problematic/ flag and it annoys you, you should disable that option, not options under [[./popup.html#problematic-options]["Mark reqres as problematic when they finish" settings]].
** Step 3: Collection, Discarding, and Limbo
Normally, /picked reqres/ proceed to the =collected= state, which queues them for archival.

Similarly, /dropped reqres/ proceed to being =discarded= from memory.
*** Limbo
:PROPERTIES:
:CUSTOM_ID: limbo
:END:

However, for /picked reqres/, when [[./popup.html#div-tabconfig.limbo]["Put newly finished reqres in limbo" setting]] is enabled in the currently active tab (or [[./popup.html#div-tabconfig.children.limbo][via]] [[./popup.html#div-config.root.limbo][the]] [[./popup.html#div-config.background.limbo][respective]] [[./popup.html#div-config.extension.limbo][settings]] for other reqres sources), the reqres in question will be put into limbo until you /collect/ it or /discard/ it manually by pressing the [[./popup.html#div-tabstats.in_limbo][appropriate buttons]] (or [[./popup.html#div-stats.in_limbo][global buttons]], if you want to do it for all tabs and sources at once).

Similarly, for /dropped reqres/, when [[./popup.html#div-tabconfig.negLimbo]["Put newly finished reqres in negLimbo" setting]] is enabled in the currently active tab (or [[./popup.html#div-tabconfig.children.negLimbo][via]] [[./popup.html#div-config.root.negLimbo][the]] [[./popup.html#div-config.background.negLimbo][respective]] [[./popup.html#div-config.extension.negLimbo][settings]] for other reqres sources), the reqres in question will be similarly put into limbo.
Mainly, this exists for debugging.

If [[./popup.html#div-config.limboNotify][this option]] is enabled and there are more than [[./popup.html#div-config.limboMaxNumber][this number]] reqres in limbo or the total size of all dumps in limbo is more than [[./popup.html#div-config.limboMaxSize][this size]] (in MiB), pWebArc will complain to remind you to /collect/ or /discard/ some of them so that your browser does not waste much memory and so that you won't loose too much data if something crashes.
*** Glossary
On its own line:

- [[./popup.html#div-stats.in_limbo][an /in-limbo reqres/]] is a reqres that is being held in =limbo= until you manually /collect/ or /discard/ it.

Displayed on the [[./popup.html#div-stats.collected][Collected/Discarded reqres]] line:

- [[./popup.html#stats.collected][A /collected reqres/]] is a reqres that was (either automatically or manually) sent to the =collected= state.
- [[./popup.html#stats.discarded][A /discarded reqres/]] is a reqres that was (either automatically or manually) sent to the =discarded=.
*** Logging
On entering =collected= or =discarded= state, metadata of each reqres is copied into the [[./popup.html#showState][recent reqres history log]] (which can be narrowed to the currently active tab with [[./popup.html#showTabState][this button]]) and is kept there until the size of the log reaches [[./popup.html#div-config.history][this many elements]], at which point the older elements of the log start being elided automatically.

You can also ask pWebArc to forget some history manually by pressing [[./popup.html#forgetHistory][this button]] to forget all history, or [[./popup.html#forgetTabHistory][this button]] to forget history of reqres generated by the currently active tab.

Note, however, that /problematic reqres/ will not get automatically elided from the log, nor forgotten by using the above buttons.
To forget about them, you will have to unset the /problematic/ flag on the respective reqres via [[./popup.html#unmarkAllProblematic][this button]], or [[./popup.html#unmarkTabProblematic][this one]], or use similar buttons in the [[./popup.html#showState][log]].
** Step 4: Archival
When [[./popup.html#div-config.archiving]["Archive collected reqres" toggle]] is enabled, pWebArc will pop the =queued= reqres from its archival queue one by one, serialize them into CBOR-formatted dumps, and then push those dumps to the archiving server at [[./popup.html#div-config.archiveURLBase]["Archive collected reqres to URL" setting]] by turning each reqres into a POST HTTP request with the dump of the reqres as request body (which is denoted by =sIO= state on the diagram).
It will also specify =profile= query parameter to the POST request using the appropriate "Profile" setting, e.g.

- [[./popup.html#div-tabconfig.profile][this one]] will be used for requests originating from the currently active tab,
- [[./popup.html#div-tabconfig.children.profile][this one]] will be used for requests originating from new child tabs opened from the currently active tab (e.g. via middle mouse click, context menu, etc),
- while [[./popup.html#div-config.root.profile][this one]] will be used for new tabs opened via browser's "New Tab" browser action (i.e. the plus sign in the tab bar, =Control+T=, menu item, etc),
- and so forth for the others (press "?" symbols to see a tooltip explaining what each of them does).

Evaluation of the =profile=  parameter is done just before the POST request is sent, so if the queue is not yet empty, and you disable [[./popup.html#div-config.archiving]["Archive collected reqres"]], edit some of the "Profile" settings, and enable [[./popup.html#div-config.archiving]["Archive collected reqres"]] again, pWebArc will start using the new setting immediately.

If [[./popup.html#div-config.archiveNotifyFailed][this option]] is enabled and some reqres failed to be archived, a new desktop notification will be generated.
If [[./popup.html#div-config.archiveNotifyOK][this option]] is enabled, a new desktop notification will be generated when the archival queue gets empty the very first time or after any failures.
*** Glossary
Displayed on the [[./popup.html#div-stats.archived][Archived/Failed reqres]] line:

- [[./popup.html#stats.archive_ok][An /archived reqres/]] is a reqres that was successfully archived to the archiving server and thus was discarded from memory.
- [[./popup.html#stats.in_queue][A /queued reqres/]] is a reqres still =queued= for archival.
- [[./popup.html#stats.archive_failed][A /failed to archive reqres/]] is a reqres that failed to be archived to the archiving server. Archiving of these reqres' will be retried every 60 seconds but you can retry it immediately by pressing [[./popup.html#retryAllFailedArchives][this button]].
* Shortcuts
pWebArc provides a bunch of keyboard and context menu shortcuts to allow using it in more efficient ways.

- On Firefox-based browsers, you can see and edit all keyboard shortcuts via "Add-ons and themes" (=about:addons=) -> the gear icon -> Manage Extension Shortcuts.
- On Chromium-based browsers, you can see and edit all keyboard shortcuts via the menu -> "Extensions" -> "Manage Extensions" (=chrome://extensions/=) -> "Keyboard shortcuts" (on the left).
** Keyboard shortcuts
pWebArc provides:

- a shortcut to open the "Internal State and Logs" page narrowed to the currently active tab's data, bound to =Alt+I= by default;
- a shortcut to toggle tracking of newly spawned HTTP requests in the [[./popup.html#div-tabconfig.collecting][currently active tab]] and [[./popup.html#div-tabconfig.children.collecting][its children]] bound to =Alt+C= by default;
- a shortcut to toggle tracking of newly spawned HTTP requests in [[./popup.html#div-tabconfig.children.collecting][children tabs]] bound to =Alt+Shift+C= by default;
- two similar shortcuts for toggling limbo mode, bound to =Alt+L= and =Alt+Shift+L= respectively by default;
- shortcuts to collect and discard all reqres from limbo for the currently active tab, bound to =Alt+Shift+A= and =Alt+Shift+D= respectively by default;
** Context menu actions
pWebArc provides:

- a context menu action to open a given link with currently active tab's [[./popup.html#div-tabconfig.children.collecting][tracking in children tabs setting]] negated.
  I.e.,

  - right-mouse clicking while pointing at a link and
  - selecting "Open Link in New Tracked/Untracked Tab" from "pWebArc" sub-menu,

  is equivalent to

  - toggling [[./popup.html#div-tabconfig.children.collecting][this]],
  - middle-mouse clicking a link,
  - toggling [[./popup.html#div-tabconfig.children.collecting][this]] again.

#+BEGIN_EXPORT html
<div id="bugs">
#+END_EXPORT
* Quirks and Bugs
** All browsers
*** Known extension bugs
- At the moment, reqres in =limbo= and =queued= reqres in the archival queue are only stored in memory, so if you close the browser or reload the extension before all the =queued= reqres finish archiving, or if you forget about some reqres in =limbo=, you will lose some data.

  This is not an issue under normal conditions, as limbo is disabled by default and archiving a reqres takes milliseconds, meaning that the queue will stay empty almost all of the time.
  But this is technically a bug that might get fixed later.

- When the extension is (re-)loaded, all tabs inherit the values of [[./popup.html#div-config.root.collecting][this]], [[./popup.html#div-config.root.limbo][this]], [[./popup.html#div-config.root.negLimbo][this]], and [[./popup.html#div-config.root.profile][this]] setting.
** On Firefox, Tor Browser, etc
*** Known browser bugs
- On Firefox-based browsers, without the [[https://github.com/Own-Data-Privateer/pwebarc/tree/master/firefox/][patch]] (also [[https://oxij.org/software/pwebarc/tree/master/firefox/][there]]), the browser only supplies =formData= to =browser.webRequest.onBeforeRequest= handlers, thus making impossible to recover the actual request body for a POST request.

  pWebArc will mark such requests as having a "partial request body" and try its best to recover the data from =formData= structure, but if a POST request was uploading files, they won't be recoverable from =formData= (in fact, it is not even possible to tell if there were any files attached there), and so your archived request data will be incomplete even after pWebArc did its best.

  Disabling [[./popup.html#div-config.archivePartialRequest][this toggle]] will disable archiving of such broken requests.
  This is not recommended, however, as archiving some data is usually better than archiving none.

  With the above patch applied, small POST requests will be archived completely and correctly.
  POST requests that upload large files and only those will be marked as having a "partial request body".

- =If-Modified-Since= and =If-None-Match= headers never get archived, because the browser never supplies them to the extensions. Thus, you can get "304 Not Modified" reqres response to a seemingly normal "GET" request.

- Reqres of already cached media files (images, audio, video, except for svg and favicons) will end in =incomplete= state because =browser.webRequest.filterResponseData= API does not provide response bodies for such requests.
  [[./popup.html#div-config.archiveIncompleteResponse][This toggle]] controls if such reqres should be =picked=.

  By default, pWebArc will =drop= them.
  Usually this is not a problem since such media will be archived on first (non-cached) access.
  But if you want to force everything on the page to be archived, you can reload the page without the cache with =Control+F5=.

- Firefox fails to run =onstop= method for =browser.webRequest.filterResponseData= filter for the very first HTTP/2 request the browser makes after you start it, thus making the first reqres =incomplete=.
  pWebArc transparently works around this bug by redirecting the very first request to =about:blank= and then reloading the tab with the original URL.
** On Chromium, Chrome, etc
*** Known browser quirks
On Chromium-based browsers, there is no way to get HTTP response data without attaching Chromium's debugger to a tab from which a request originates from.
This makes things a bit tricky, for instance:

- With [[./popup.html#div-config.collecting][pWebArc enabled]], new tabs will be set to =about:blank= because the default of =chrome://newtab/= does not allow attaching debugger to the tabs with =chrome:= URLs.

- Requests made before the debugger is attached will get canceled by the extension.
  So, for instance, when you middle-click a link, Chromium will open a new tab, but pWebArc will block the requests from there until the debugger gets attached and then automatically reload the tab after.
  As side-effect of this, Chromium will show "Request blocked" page until the debugger is attached and the page is reloaded, meaning it will get visually stuck on "Request blocked" page if fetching the request ended up spawning a download instead of showing a page.
  The download will proceed as normal, though.

- You will get an annoying notification bar constantly displayed in the browser while [[./popup.html#div-config.collecting][pWebArc is enabled]].
  Closing that notification will detach the debugger.
  pWebArc will reattach it immediately because it assumes you don't want to lose data and closing that notification on accident is, unfortunately, quite easy.

  *However, closing the notification will make all in-flight requests lose their response data.*

  If you [[./popup.html#div-config.collecting][disable pWebArc]] the debuggers will get detached only after all requests finish.
  But even if there are no requests in-flight the notification will not disappear immediately.
  Chromium takes its time updating the UI after the debugger is detached.
*** Known browser bugs
- Chromium will automatically detach a debugger from a tab if it tries to save too much data into its debugger state.
  Which means that a tab that loads too much data too fast will get its debugger detached.
  Chromium does this to try and save memory, but this, among other issues, means that large media files will fail to be properly archived, and any page that loads such files is likely to fail to be archived too.

  This is a design limitation of Chromium debugging interface, there appears to be no work-around for this at the moment.

  Meanwhile, on Firefox, pWebArc uses =browser.webRequest.filterResponseData= API (not available no Chromium, because it greatly enhances browser's ad-blocking capabilities) which does not suffer from this problem.

- Similarly to unpatched Firefox, Chromium-based browsers do not supply contents of files in POST request data.
  They do, however, provide a way to see if files were present in the request, so pWebArc will mark such and only such requests as having a "partial request body".
  There is no patch for Chromium to fix this, nor does the author plan to make one (feel free to contribute one, though).

  As with Firefox, disabling [[./popup.html#div-config.archivePartialRequest][this toggle]] will disable archiving of such broken requests.
  This is not recommended, however, as archiving some data is usually better than archiving none.

- If the server supplies the same header multiple times (which happens sometimes) then archived response headers will be incomplete, as Chromium's =Network.responseReceived= debugging API event provides a dictionary of headers, not a list.

- Chromium fails to provide =openerTabId= to tabs created with =chrome.tabs.create= API so in the unlikely case of opening two or more new tabs/windows in rapid succession via pWebArc context menu actions and not giving them time to initialize pWebArc could end up mixing up settings between the newly created tabs/windows.
  This bug is impossible to trigger unless your system is very slow or you are clicking things with automation tools like =AutoHotKey= or =xnee=.
*** Known extension bugs
- Response data of background requests and requests made by other extensions does not get collected.

#+BEGIN_EXPORT html
</div>
<div id="errors">
#+END_EXPORT
* Error messages
- =pWebArc FAILED to archive <N> items in the queue because it can't establish a connection to the archive at <URL>=

  Are you running the [[https://oxij.org/software/pwebarc/tree/master/dumb_server/][the archiving server script]]?
  pWebArc requires an archiving server to actually archive anything.
- =pWebArc FAILED to archive <N> items in the queue because requests to URL fail with: <STATUS> <REASON>: <RESPONSE>=

  Your archiving sever is returning HTTP errors when pWebArc is trying to archive data to it.
  See its error console for more information.

  Some common reasons it could be failing:
  - No space left on the device you are archiving to.
  - It's a bug.

#+BEGIN_EXPORT html
</div>
<div id="faq">
#+END_EXPORT
* Frequently Asked Questions
** Does pWebArc send any of my collected web browsing data to any third-parties?
No, pWebArc only ever sends data to the [[./popup.html#div-config.archiveURLBase][archiving server URL]] you specify.
** Does pWebArc collect and send any telemetry anywhere?
No. pWebArc does remember some global stat numbers (like [[./popup.html#div-stats.collected][Collected/Discarded reqres]]) across restarts, but they are never sent anywhere.
** Why do pages under [[https://addons.mozilla.org/]] and [[https://chromewebstore.google.com/]] can not be collected?
Browsers prevent extensions from running on extension store pages to prevent them from manipulating ratings, reviews, and etc such things.
However, you can archive [[https://addons.mozilla.org/]] pages by running pWebArc under Chromium and [[https://chromewebstore.google.com/]] pages by running pWebArc under Firefox.
** Why does page X or some part of it fails to be properly collected?
Did you read the notes on [[#bugs][the bugs of the browser you are using]] above?

Most notably:

- both Chromium- and Firefox-based browsers in their default builds fail to properly supply POST request data to their extensions; for Firefox-based browsers there exists a patch that fixes it, mostly; Chromium users are out of luck at the moment;

- on a Chromium-based browser, because of limitations of the Chromium's debugging interface, it is impossible to archive large media files; this issue has no work-around and, AFAIK, all alternatives to pWebArc running on Chromium-based browser suffer from it; try using pWebArc in a Firefox-based browser instead.

If the notes above do not explain your problem, [[https://github.com/Own-Data-Privateer/pwebarc/issues][open an issue on GitHub]].
#+BEGIN_EXPORT html
</div>
#+END_EXPORT
