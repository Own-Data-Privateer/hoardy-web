* What?
=pWebArc= (Personal Private Passive Web Archive) is a browser extension that passively collects and archives dumps of HTTP requests and responses to your own private archiving server (like [[https://github.com/Own-Data-Privateer/pwebarc/tree/master/dumb_server/][the dumb archiving server]], also [[https://oxij.org/software/pwebarc/tree/master/dumb_server/][there]]) as you browse the web.
* Glossary
- A /reqres/ is a pWebArc-internal object containing information about an HTTP request and its response, including their headers and data, and some meta-information (whether it originates from an extension, =tabId= it originates from, its state, etc).
- [[./popup.html#div-stats.in_flight][An /in-flight reqres/]] is a reqres of an HTTP request that is still tracked by pWebArc, i.e. it has not finished yet, nor yet failed to finish.
- [[./popup.html#div-stats.taken][A /taken reqres/]] is a reqres of a finished (either successfully or with an error) HTTP request that satisfied the archiving conditions controlled by [[./popup.html#archive-options]["Archive reqres with" settings]].
- [[./popup.html#div-stats.discarded][A /discarded reqres/]] is a reqres of a finished (either successfully or with an error) HTTP request that did /NOT/ satisfy the archiving conditions and thus was (mostly, except for the data used by the [[./state.html][Logs]]) discarded.
- [[./popup.html#div-stats.queued][A /queued for archival reqres/]] is a /taken/ reqres currently queued for archival via the archival server controlled by [[./popup.html#div-config.archiveURLBase]["Archive to" URL setting]].
- [[./popup.html#div-stats.archive_failed][A /failed to archive reqres/]] is a queued for archival reqres that failed to be archived to the archiving server. Archiving of these reqres' will be retried every 60 seconds.
- [[./popup.html#div-stats.archive_ok][An /archived reqres/]] is a reqres that was successfully archived to the archiving server and thus was (mostly, except for the data used by the [[./state.html][Logs]]) discarded from memory.
- [[./popup.html#div-stats.in_limbo][An /in-limbo reqres/]] is a finished reqres that satisfies the conditions to be /taken/, but [[#limbo]["limbo mode"]] is enabled for the tab (or other source) this reqres was generated by, and so it was put into limbo until you manually take it for archival or discard it.
- [[./popup.html#div-stats.problematic][A /problematic reqres/]] is a finished reqres that satisfies the conditions set by [[./popup.html#problematic-options]["Mark reqres as problematic when they finish" settings]].
  By default, HTTP requests that failed to get a response or those response bodies were loaded incompletely will be marked as /problematic/.
  /Problematic/ reqres status is separate from all other statuses and does not influence archival.
  It exists because, normally, browsers provide no indication when some parts of the page failed to load properly --- they expect you to actually look at the page with your eyes to notice something looking broken (and reload it manually) instead --- which is not a proper way to do this when you want to be sure that the whole page with all its resources was archived, as some of the incompletely loaded parts of the page might be invisible.
  And so, to provide such an indicator, pWebArc counts and logs /problematic/ reqres.
* General operation
** Step 1: Start tracking an HTTP request
pWebArc attaches to browser's runtime and tracks progress of HTTP requests and their responses, saving both their request and response headers and data at appropriate times in the browser's request and response processing pipeline.

Whether pWebArc will track a given request depends on the "Track new reqres" toggles (or checkboxes, if you are using a browser without support for the needed CSS) in [[./popup.html][Settings]], e.g:

- [[./popup.html#div-config.collecting][this one]] allows you to disable tracking of newly spawned HTTP requests globally, thus basically disabling pWebArc (except for reqres that are already being tracked and unfinished archivals),
- [[./popup.html#div-tabconfig.collecting][this one]] controls whether pWebArc will track new reqres originating from the currently active tab,
- [[./popup.html#div-tabconfig.children.collecting][this one]] controls whether it will track new reqres originating from new tabs opened from the currently active tab (aka "children tabs", e.g. via middle mouse click, context menu, etc),
- while [[./popup.html#div-config.root.collecting][this one]] controls whether it will track new reqres originating from new tabs opened via browser's "New Tab" browser action (i.e. the plus sign in the tab bar, =Control+T=, menu item, etc),
- and so forth for the others (press "?" symbols to see a tooltip explaining what each of them does).

Disabling any of these toggles does not stop tracking of already initiated requests, it only stops new requests controlled by that toggle from being tracked.
*** Shortcuts
Also, note that pWebArc provides

- a shortcut to toggle tracking of newly spawned HTTP requests in the [[./popup.html#div-tabconfig.collecting][currently active tab]] and [[./popup.html#div-tabconfig.children.collecting][its children]]: the default shortcut is `Alt+C` (in Firefox, it can be edited in extension's settings -> Manage Extension Shortcuts);
- a shortcut to toggle tracking of newly spawned HTTP requests in [[./popup.html#div-tabconfig.children.collecting][children tabs]]: the default shortcut is `Alt+Shift+C`;
- a context menu action to open a given link with current tab's [[./popup.html#div-tabconfig.children.collecting][tracking in children tabs setting]] negated: do a right-click while pointing at a link and navigate to "pWebArc" sub-menu, this removes the need for "toggle it, middle-click a link, toggle it again" interactions.
** Step 2: Collect data until it finishes
In-flight reqres can finish in one of the following states (this is the "State" column in the [[./state.html][Logs]]):

- =canceled=: request was canceled before it was sent (usually by another extension like uBlock Origin);
- =no_response=: request was sent, but then it was canceled before getting a response, or the connection was rejected, or network timeout was reached;
- =incomplete=: request was sent, response headers were received, but downloading of the response's body was interrupted;
- =incomplete_fc=: on Firefox: the browser loaded the response data of this reqres directly from cache and did not give it to the extension; this is a separate state, because usually this means this URL was successfully archived before (if it was not, reload the page with Control+F5);
- =complete=: request was completed successfully;
- =complete_fc=: request was completed from browser's cache.
** Step 3: Decide what to do with it
Then, depending on the [[./popup.html#archive-options]["Archive reqres with" settings]], the reqres in question will either be taken for archival or discarded (displayed as green and red colors respectively in the [[./state.html][Logs]]).
** Step 4: Limbo
:PROPERTIES:
:CUSTOM_ID: limbo
:END:
If limbo mode is [[./popup.html#div-tabconfig.limbo][enabled in the current tab]] (or [[./popup.html#div-tabconfig.children.limbo][via]] [[./popup.html#div-config.root.limbo][the]] [[./popup.html#div-config.extension.limbo][respective]] [[./popup.html#div-config.background.limbo][settings]] for other reqres sources) the reqres will be put into limbo until you manually take it for archival or discard it by pressing the [[./popup.html#div-tabstats.in_limbo][appropriate buttons]] (or [[./popup.html#div-stats.in_limbo][global buttons]], if you want to do it for all tabs and sources at once).
*** Shortcuts
Also, note that pWebArc provides keyboard shortcuts to either take or discard reqres for the active tab, which are `Alt+A` and `Alt+Shift+D` by default.
** Step 5: Archive it
Then, each reqres taken for archival will be put into the archival queue, from which, if [[./popup.html#div-config.archiving]["Archive collected reqres" toggle/checkbox]] is enabled, pWebArc will pop them one by one and push them to the archiving server at [[./popup.html#div-config.archiveURLBase]["Archive to" URL setting]] by turning each reqres into a POST HTTP request with CBOR-formatted dump of reqres as request body.
It will also specify =profile= query parameter to the POST request using the appropriate "Profile" setting, e.g.

- [[./popup.html#div-tabconfig.profile][this one]] will be used for requests originating from the currently active tab,
- [[./popup.html#div-tabconfig.children.profile][this one]] will be used for requests originating from new child tabs opened from the currently active tab (e.g. via middle mouse click, context menu, etc),
- while [[./popup.html#div-config.root.profile][this one]] will be used for new tabs opened via browser's "New Tab" browser action (i.e. the plus sign in the tab bar, =Control+T=, menu item, etc),
- and so forth for the others (press "?" symbols to see a tooltip explaining what each of them does).

Evaluation of the =profile=  parameter gets done just before the POST request is sent, so if the queue is not yet empty, and you disable [[./popup.html#div-config.archiving]["Archive collected reqres"]], edit some of the "Profile" settings, and enable [[./popup.html#div-config.archiving]["Archive collected reqres"]] again, pWebArc will start using the new setting immediately.
* Quirks and Bugs
** All browsers
*** Known extension bugs
- At the moment, reqres in limbo and in the archival queue are only stored in memory, so if you close the browser or reload the extension before all the queued reqres finish archiving, or if you forget some reqres in limbo, you will lose some data.

  This is not an issue under normal conditions, as limbo is disabled by default and archiving a reqres takes milliseconds, meaning that the queue will stay empty almost all of the time.
  But this is technically a bug that might get fixed later.

- When the extension is (re-)loaded, all tabs inherit the values of [[./popup.html#div-config.root.collecting][this]], [[./popup.html#div-config.root.limbo][this]], and [[./popup.html#div-config.root.profile][this]] setting.
** On Firefox, Tor Browser, etc
*** Known browser bugs
- On Firefox-based browsers, without the [[https://github.com/Own-Data-Privateer/pwebarc/tree/master/firefox/][patch]] (also [[https://oxij.org/software/pwebarc/tree/master/firefox/][there]]), the browser only supplies =formData= to =browser.webRequest.onBeforeRequest= handlers, thus making impossible to recover the actual request body for a POST request.

  pWebArc will mark such requests as having a "partial request body" and try its best to recover the data from =formData= structure, but if a POST request was uploading files, they won't be recoverable from =formData= (in fact, it is not even possible to tell if there were any files attached there), and so your archived request data will be incomplete even after pWebArc did its best.

  Disabling [[./popup.html#div-config.archivePartialRequest]["Archive reqres with partial POST form data" toggle/checkbox]] will disable archiving of such broken requests.
  This is not recommended, however, as archiving some data is usually better than archiving none.

  With the above patch applied, small POST requests will be archived completely and correctly.
  POST requests that upload large files and only those will be marked as having a "partial request body".

- =If-Modified-Since= and =If-None-Match= headers never get archived, because the browser never supplies them to the extensions. Thus, you can get "304 Not Modified" reqres response to a seemingly normal "GET" request.

- Reqres of already cached media files (images, audio, video, except for svg and favicons) will end in =incomplete= state because =browser.webRequest.filterResponseData= API does not provide response bodies for such requests.

  Thus, no data about already cached media will be archived unless [[./popup.html#div-config.archiveIncompleteResponse]["Archive reqres with incomplete response bodies" toggle/checkbox]] is set.

  Usually this is not a problem since such media will be archived on first (non-cached) access.
  But if you want to force everything on the page to be archived, you can reload the page without the cache with =Control+F5=.
** On Chromium, Chrome, etc
*** Known browser quirks
On Chromium-based browsers, there is no way to get HTTP response data without attaching Chromium's debugger to a tab from which a request originates from.
This makes things a bit tricky, for instance:

- With [[./popup.html#div-config.collecting][pWebArc enabled]], new tabs will be set to =about:blank= because the default of =chrome://newtab/= does not allow attaching debugger to the tabs with =chrome:= URLs.

- Requests made before the debugger is attached will get canceled by the extension.
  So, for instance, when you middle-click a link, Chromium will open a new tab, but pWebArc will block the requests from there until the debugger gets attached and then automatically reload the tab after.
  As side-effect of this, Chromium will show "Request blocked" page until the debugger is attached and the page is reloaded, meaning it will get visually stuck on "Request blocked" page if fetching the request ended up spawning a download instead of showing a page.
  The download will proceed as normal, though.

- You will get an annoying notification bar constantly displayed in the browser while [[./popup.html#div-config.collecting][pWebArc is enabled]].
  Closing that notification will detach the debugger.
  pWebArc will reattach it immediately because it assumes you don't want to lose data and closing that notification on accident is, unfortunately, quite easy.

  *However, closing the notification will make all in-flight requests lose their response data.*

  If you [[./popup.html#div-config.collecting][disable pWebArc]] the debuggers will get disconnected only after all requests finish.
  But even if there are no requests in-flight the notification will not disappear immediately.
  Chromium takes its time updating the UI after the debugger is detached.
*** Known browser bugs
- Similarly to unpatched Firefox, Chromium-based browsers do not supply contents of files in POST request data.
  They do, however, provide a way to see if files were present in the request, so pWebArc will mark such and only such requests as having a "partial request body".
  There is no patch for Chromium to fix this, nor does the author plan to make one (feel free to contribute one, though).

  As with Firefox, disabling [[./popup.html#div-config.archivePartialRequest]["Archive reqres with partial POST form data" toggle/checkbox]] will disable archiving of such broken requests.
  This is not recommended, however, as archiving some data is usually better than archiving none.

- If the server supplies the same header multiple times (which happens sometimes) then archived response headers will be incomplete, as Chromium's =Network.responseReceived= debugging API event provides a dictionary of headers, not a list.

- Chromium fails to provide =openerTabId= to tabs created with =chrome.tabs.create= API so in the unlikely case of opening two or more new tabs/windows in rapid succession via pWebArc context menu actions and not giving them time to initialize pWebArc could end up mixing up settings between the newly created tabs/windows.
  This bug is impossible to trigger unless your system is very slow or you are clicking things with automation tools like =AutoHotKey= or =xnee=.
*** Known extension bugs
- Response data of background requests and requests made by other extensions does not get collected.

#+BEGIN_EXPORT html
<div id="errors">
#+END_EXPORT
* Error messages
- =pWebArc FAILED to archive <N> items in the queue because it can't establish a connection to the archive at <URL>=

  Are you running the [[https://oxij.org/software/pwebarc/tree/master/dumb_server/][the archiving server script]]?
  pWebArc requires an archiving server to actually archive anything.
- =pWebArc FAILED to archive <N> items in the queue because requests to URL fail with: <STATUS> <REASON>: <RESPONSE>=

  Your archiving sever is returning HTTP errors when pWebArc is trying to archive data to it.
  See its error console for more information.

  Some common reasons it could be failing:
  - No space left on the device you are archiving to.
  - It's a bug.
#+BEGIN_EXPORT html
</div>
#+END_EXPORT
* FAQ
** Does pWebArc send any data to any third-parties?
No. It only sends data to the archiving server URL you specify.
Do =grep -r XMLHttpRequest extension= in the source repository, there's only a single use (or two, if you count this).
