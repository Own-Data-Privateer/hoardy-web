<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>pWebArc: Settings</title>
    <link rel="shortcut icon" type="$iconMIME$" href="../icon/$iconFile$">
    <link rel="stylesheet" href="main.css?v=$cssVersion$">
    <style>
body {
    min-width: 300px;
    line-height: 160%;
}

input[type="button"], .help-btn {
    vertical-align: top;
}

.help-tip {
    left: 10%;
    right: 10%;
}

h1 {
    font-size: 110%;
    margin: 0;
    margin-top: 5px;
    display: flex;
}

h2 {
    font-size: 100%;
    margin: 0;
    margin-top: 5px;
    display: flex;
}

h1 span.right,
h2 span.right {
    display: flex;
}

h1 input[type="button"],
h2 input[type="button"] {
    margin-left: 0.5em;
}

#version {
    font-size: 70%;
    vertical-align: top;
}

.smaller,
.pure-text input[type="button"] {
    font-size: 80%;
}

.stats {
    margin-left: 1em;
}

.stats .help-root > div {
    display: flex;
}

.stats .help-root > div > span:nth-child(2) {
    padding-left: 1em;
    margin: 0 1em 0 auto;
}

.stats .help-root > div > span:nth-child(3) {
    min-width: 5em;
    text-align: right;
}

.stats .help-root > div > span:nth-child(3) > span.target {
    padding: 0 1em;
}

.opts {
    margin-left: 0.6em;
}

.buttons,
.buttons > span {
    display: flex;
}

label code {
    margin: 0 0.5em;
}

#showAll {
    font-size: 100%;
    width: 99%;
    margin: 5px auto 0 auto;
}

.disabled-archive .da,
.disabled-collecting .dc,
.disabled-collecting .dc input[type="checkbox"].toggle,
.disabled-auto .dauto,
.disabled-problematic-notify .dpn,
.disabled-limbo-notify .dln {
    --text-background: var(--text-inactive-background);
    --text-border-color: var(--text-inactive-border-color);
    --text-color: var(--text-inactive-color);
    --toggle-background: var(--text-inactive-background);
    --toggle-border-color: var(--text-inactive-border-color);
}
    </style>
  </head>
  <body>
    <div id="body_loading">
      <p>Loading...</p>
    </div>
    <div id="body_error" style="display: none">
      <p>This page failed to initialize. To see more details:</p>
      <ul>
        <li>On Firefox-based browser: go to <code>about:debugging#/runtime/this-firefox</code>, click &quot;Inspect&quot; button on &quot;pWebArc&quot;, select &quot;Console&quot;</li>
        <li>On Chromium-based browser: go to <code>chrome://extensions/</code>, click &quot;Inspect views&quot; link on &quot;pWebArc&quot;, select &quot;Console&quot;</li>
      </ul>
    </div>
    <div id="body" style="display: none">
    <!-- idBody -->

    <h1>
      Globally
      <input type="button" id="version" data-help="Open the &quot;Changelog&quot; page." value="v?" />
      <input type="button" id="help" class="smaller" data-help="Open the &quot;Help&quot; page." value="Help" />
      <span class="right">
        <input type="button" id="snapshotAll" data-shortcut="snapshotAll" data-help="Take DOM snapshots of all frames of all open tabs for which &quot;Track new reqres&quot; setting is enabled." value="Snapshot" />
        <input type="button" id="forgetHistory" data-help="Forget recent history." value="Forget" />
        <input type="button" id="showState" data-shortcut="showState" data-help="Show the internal state and history." value="State" />
      </span>
    </h1>
    <div class="stats">
      <div name="more" id="div-stats.scheduled" data-help="The number of currently scheduled internal actions, including those generated by delayed saving of config and persistent stats, automatic retries of failed archivals, and &quot;Automatic actions for recently closed tabs&quot; below. When this is non-zero, toolbar button's badge has &quot;~&quot; or &quot;.&quot; in it.">
        <span>Scheduled</span>
        <span>
          <input type="button" id="runAllActions" class="smaller" data-help="Run all scheduled actions immediately." value="Run" />
          <input type="button" id="cancelCleanupActions" class="smaller" data-help="Cancel all scheduled actions that can be canceled." value="Cancel" />
        </span>
        <span>
          <span id="stats.scheduled">0</span>
        </span>
      </div>
      <div name="more" id="div-stats.actions" data-help="Names of the currently scheduled internal actions.">
        <span>... actions</span>
        <span>
        </span>
        <span>
          <span id="stats.actions"></span>
        </span>
      </div>
      <div id="div-stats.submittedHTTP" data-help="From the last reset, the number of reqres that were successfully archived by being submitted to the archiving server (and the sum total of all sizes of their dumps) / at the moment, the number of reqres that failed to be archived to either the archiving server.">
        <span>Submitted/Failed</span>
        <span>
          <input type="button" id="retryFailed" data-help="Move all failed to archive reqres to the archival queue. (Archivals that fail because of networking issues will be retried automatically every 60 seconds, others will not.) See the &quot;Help&quot; page for more info." value="Retry" />
        </span>
        <span>
          <span id="stats.submittedHTTP">0</span>
          (<span id="stats.submittedHTTP_size">0</span>)
        </span>
      </div>
      <div id="div-stats.queued_failed" data-help="At the moment, the number of reqres that are waiting to be archived in the archival queue (and the sum total of all sizes of their dumps). / At the moment, the number of reqres that failed to be archived via one or more of the selected archiving methods (and the sum total of all sizes of their dumps).">
        <span>Queued/Failed</span>
        <span>
          <input type="button" id="retryFailed" data-help="Move all failed to archive reqres to the archival queue and then nudge the archiving sub-process awake. (Archivals that fail because of networking issues will be retried automatically every 60 seconds, others will not.) See the &quot;Help&quot; page for more info." value="Retry" />
        </span>
        <span>
          <span id="stats.queued">0</span>
          (<span id="stats.queued_size">0</span>)
          /
          <span id="stats.failed">0</span>
          (<span id="stats.failed_size">0</span>)
        </span>
      </div>
      <div id="div-stats.collected" data-help="From the last reset, the number of finished reqres that were collected for archival (and the sum total of all sizes of their dumps).">
        <span>Collected</span>
        <span>
        </span>
        <span>
          <span id="stats.collected">0</span>
          (<span id="stats.collected_size">0</span>)
        </span>
      </div>
      <div id="div-stats.discarded" data-help="From the last reset, the number of finished reqres that were NOT collected for archival and thus discarded from memory (and the sum total of all sizes of their dumps).">
        <span>Discarded</span>
        <span>
        </span>
        <span>
          <span id="stats.discarded">0</span>
          (<span id="stats.discarded_size">0</span>)
        </span>
      </div>
      <div id="div-stats.in_limbo" data-help="At the moment, the number of finished reqres in limbo (and the sum total of all sizes of their dumps).">
        <span>In limbo</span>
        <span>
          <input type="button" id="collectAllInLimbo" data-shortcut="collectAllInLimbo" data-help="Collect all reqres in limbo." value="Collect" />
          <input type="button" id="discardAllInLimbo" data-shortcut="discardAllInLimbo" data-help="Discard all reqres in limbo." value="Discard" />
        </span>
        <span>
          <span id="stats.in_limbo">0</span>
          (<span id="stats.in_limbo_size">0</span>)
        </span>
      </div>
      <div name="more" id="div-stats.picked" data-help="From the last reset, the number of reqres that satisfied &quot;Pick reqres for archival when they finish&quot; conditions at the moment they `finished`.">
        <span>Picked</span>
        <span>
        </span>
        <span>
          <span id="stats.picked">0</span>
        </span>
      </div>
      <div name="more" id="div-stats.dropped" data-help="From the last reset, the number of reqres that did NOT satisfy &quot;Pick reqres for archival when they finish&quot; conditions at the moment they `finished`.">
        <span>Dropped</span>
        <span>
        </span>
        <span>
          <span id="stats.dropped">0</span>
        </span>
      </div>
      <div id="div-stats.problematic" data-help="At the moment, the number of reqres that satisfied &quot;Mark reqres as problematic when they finish&quot; conditions at the moment they `finished`.">
        <span>Problematic</span>
        <span>
          <input type="button" id="unmarkAllProblematic" data-shortcut="unmarkAllProblematic" data-help="Unmark all problematic reqres." value="Unmark" />
        </span>
        <span>
          <span id="stats.problematic">0</span>
        </span>
      </div>
      <div id="div-stats.in_flight" data-help="At the moment, the number of reqres that have not finished yet.">
        <span>In flight</span>
        <span>
          <input type="button" id="stopAllInFlight" data-help="Stop tracking progress of all in-flight reqres and either pick or drop them, depending on their completion and &quot;Pick reqres for archival when they finish&quot; options." value="Stop" />
        </span>
        <span>
          <span id="stats.in_flight">0</span>
        </span>
      </div>
    </div>

    <div name="more" class="opts">
    <ui id="config.collecting" type="boolean" class="prefer-on" data-help="Also known as &quot;Enable this add-on&quot;. Generate a new reqres and start tracking its progress when the browser makes a new HTTP request. Disabling this option will stop pWebArc from recording any new data. Already tracked reqres will still get tracked until they finish.">Track newly generated requests</ui>
    <ui id="config.archive" type="boolean" class="prefer-on" data-help="What it says on the tin. Disabling this will keep them stuck in the archiving queue indefinitely, in which case restarting the browser or reloading the extension will loose them. Which is why you probably shouldn&#039;t disable this option, unless you want to disable this, atomically change some of the &quot;Profile&quot; settings below, and then enable this again.">Archive <code>collected</code> reqres</ui>
    <ui id="config.submitHTTPURLBase" type="string" class="da ds" data-help="URL of the server we are archiving to.">... at URL</ui>
    </div>

    <div id="this-tab-options">
    <!-- thisTabOptions -->
    <h1>This tab
      <span class="right">
        <input type="button" id="snapshotTab" data-shortcut="snapshotTab" data-help="Take DOM snapshots of all frames of this tab, regardless of &quot;Track newly generated requests&quot; setting." value="Snapshot" />
        <input type="button" id="forgetTabHistory" data-help="For reqres of this tab, forget recent history." value="Forget" />
        <input type="button" id="showTabState" data-shortcut="showTabState" data-help="For reqres of this tab, show the internal state and history." value="State" />
      </span>
    </h1>
    <div class="stats">
      <div name="more" id="div-tabstats.collected" data-help="For this tab, the number of finished reqres that were collected for archival (and the sum total of all sizes of their dumps).">
        <span>Collected</span>
        <span>
        </span>
        <span>
          <span id="tabstats.collected">0</span>
          (<span id="tabstats.collected_size">0</span>)
        </span>
      </div>
      <div name="more" id="div-tabstats.discarded" data-help="For this tab, the number of finished reqres that were NOT collected for archival and thus were discarded from memory (and the sum total of all sizes of their dumps).">
        <span>Discarded</span>
        <span>
        </span>
        <span>
          <span id="tabstats.discarded">0</span>
          (<span id="tabstats.discarded_size">0</span>)
        </span>
      </div>
      <div id="div-tabstats.in_limbo" data-help="For this tab, the number of finished reqres in limbo (and the sum total of all sizes of their dumps).">
        <span>In limbo</span>
        <span>
          <input type="button" id="collectAllTabInLimbo" data-shortcut="collectAllTabInLimbo" data-help="For reqres of this tab, collect all reqres in limbo." value="Collect" />
          <input type="button" id="discardAllTabInLimbo" data-shortcut="discardAllTabInLimbo" data-help="For reqres of this tab, discard all reqres in limbo." value="Discard" />
        </span>
        <span>
          <span id="tabstats.in_limbo">0</span>
          (<span id="tabstats.in_limbo_size">0</span>)
        </span>
      </div>
      <div name="more" id="div-tabstats.picked" data-help="For this tab, the number of reqres that satisfied &quot;Pick reqres for archival when they finish&quot; conditions at the moment they `finished`.">
        <span>Picked</span>
        <span>
        </span>
        <span>
          <span id="tabstats.picked">0</span>
        </span>
      </div>
      <div name="more" id="div-tabstats.dropped" data-help="For this tab, the number of reqres that did NOT satisfy &quot;Pick reqres for archival when they finish&quot; conditions at the moment they `finished`.">
        <span>Dropped</span>
        <span>
        </span>
        <span>
          <span id="tabstats.dropped">0</span>
        </span>
      </div>
      <div id="div-tabstats.problematic" data-help="For this tab, the number of reqres that satisfied &quot;Mark reqres as problematic when they finish&quot; conditions at the moment they `finished`.">
        <span>Problematic</span>
        <span>
          <input type="button" id="unmarkAllTabProblematic" data-shortcut="unmarkAllTabProblematic" data-help="For reqres of this tab, unmark all problematic reqres." value="Unmark" />
        </span>
        <span>
          <span id="tabstats.problematic">0</span>
        </span>
      </div>
      <div id="div-tabstats.in_flight" data-help="For this tab, the number of in-flight reqres that have not finished yet.">
        <span>In flight</span>
        <span>
          <input type="button" id="stopAllTabInFlight" data-help="For reqres of this tab, stop tracking progress of all in-flight requests and either collect them for archival or fail them, depending on completion and &quot;Pick reqres for archival when they finish&quot; options." value="Stop" />
        </span>
        <span>
          <span id="tabstats.in_flight">0</span>
        </span>
      </div>
    </div>
    <div class="opts">
    <ui id="tabconfig.collecting" type="boolean" class="prefer-on dc" tabindex=2 data-shortcut="toggleTabConfigTracking" data-help="Track new reqres originating from this tab.">Track new reqres</ui>
    <ui id="tabconfig.limbo" type="boolean" tabindex=3 data-shortcut="toggleTabConfigLimbo" data-help="For this tab, put newly `finished` reqres tab that satisfy &quot;Pick reqres for archival when they finish&quot; settings into limbo until you collect them for archival or discard them manually.">Pick into limbo</ui>
    </div>

    <div name="more" class="opts">
    <ui id="tabconfig.negLimbo" type="boolean" class="prefer-off" data-help="For this tab, put newly `finished` reqres that do NOT satisfy &quot;Pick reqres for archival when they finish&quot; settings into limbo instead of discarding them immediately. Useful for debugging.">Drop into limbo</ui>
    <ui id="tabconfig.profile" type="string" class="da" data-help="Use this server-side profile when archiving reqres originating from this tab.">Profile</ui>
    </div>
    <!-- thisTabOptions -->
    </div>

    <div id="this-tab-children-options">
    <!-- thisTabChildrenOptions -->
    <h1>This tab&#039;s new children</h1>
    <div class="opts">
    <ui id="tabconfig.children.collecting" type="boolean" tabindex=4 class="prefer-on dc" data-shortcut="toggleTabConfigChildrenTracking" data-help="Enable &quot;Track new reqres&quot; option in new tabs spawned from this tab (via middle mouse click, context menu actions).">Enable &quot;Track new reqres&quot;</ui>
    <ui id="tabconfig.children.limbo" type="boolean" tabindex=5 data-shortcut="toggleTabConfigChildrenLimbo" data-help="Enable &quot;Pick into limbo&quot; option in new tabs spawned from this tab (via middle mouse click, context menu actions).">Enable &quot;Pick into limbo&quot;</ui>
    </div>

    <div name="more" class="opts">
    <ui id="tabconfig.children.negLimbo" type="boolean" class="prefer-off" data-help="Enable &quot;Drop into limbo&quot; option in new tabs spawned from this tab (via middle mouse click, context menu actions).">Enable &quot;Drop into limbo&quot;</ui>
    <ui id="tabconfig.children.profile" type="string" class="da" data-help="Use this server-side profile when archiving reqres originating from new tabs opened from this tab (middle mouse click, context menu actions).">Profile</ui>
    </div>
    <!-- thisTabChildrenOptions -->
    </div>

    <div id="root-tab-options">
    <!-- rootTabOptions -->
    <h1>New root tabs</h1>
    <div class="opts">
    <ui id="config.root.collecting" type="boolean" class="prefer-on dc" tabindex=6 data-help="Enable &quot;Track new reqres&quot; option in new tabs opened via browser&#039;s &quot;New Tab&quot; browser action (new tabs created via the plus sign in the tab bar, Control+T, &quot;New Tab&quot; menu item). This setting also gets applied to all open tabs when pWebArc is (re)loaded.">Enable &quot;Track new reqres&quot;</ui>
    <ui id="config.root.limbo" type="boolean" tabindex=7 data-help="Enable &quot;Pick into limbo&quot; option in new tabs opened via browser&#039;s &quot;New Tab&quot; action (new tabs created via the plus sign in the tab bar, Control+T, &quot;New Tab&quot; menu item). This setting also gets applied to all open tabs when pWebArc is (re)loaded.">Enable &quot;Pick into limbo&quot;</ui>
    </div>
    <div name="more">
    <!-- smallMore -->
    <div class="opts">
    <ui id="config.root.negLimbo" type="boolean" class="prefer-off" data-help="Enable &quot;Drop into limbo&quot; option in new tabs opened via browser&#039;s &quot;New Tab&quot; action (new tabs created via the plus sign in the tab bar, Control+T, &quot;New Tab&quot; menu item). This setting also gets applied to all open tabs when pWebArc is (re)loaded.">Enable &quot;Drop into limbo&quot;</ui>
    <ui id="config.root.profile" type="string" class="da" data-help="Use this server-side profile when archiving reqres originating from new tabs opened via browser&#039;s &quot;New Tab&quot; browser action (new tabs created via the plus sign in the tab bar, Control+T, &quot;New Tab&quot; menu item). This setting also gets applied to all open tabs when pWebArc is (re)loaded.">Profile</ui>
    </div>
    <!-- smallMore -->
    </div>
    <!-- rootTabOptions -->
    </div>

    <div name="more">
    <!-- bigMore -->

    <div id="background-options">
    <!-- backgroundOptions -->
    <h1>Background tasks</h1>
    <div class="opts">
    <ui id="config.background.collecting" type="boolean" class="prefer-on dc" data-help="Track new reqres originating from browser&#039;s background tasks (excluding those originating from extensions). With the default browser config you probably should not disable this as browsers do link pre-fetching in background, and disabling this will miss that data.">Track new reqres</ui>
    <ui id="config.background.limbo" type="boolean" data-help="For reqres originating from browser&#039;s background tasks (excluding those originating from extensions), put newly `finished` reqres tab that satisfy &quot;Pick reqres for archival when they finish&quot; settings into limbo until you collect them for archival or discard them manually.">Pick into limbo</ui>
    <ui id="config.background.negLimbo" type="boolean" class="prefer-off" data-help="For reqres originating from browser&#039;s background tasks (excluding those originating from extensions), put newly `finished` reqres tab that do NOT satisfy &quot;Pick reqres for archival when they finish&quot; settings into limbo instead of discarding them immediately. Useful for debugging.">Drop into limbo</ui>
    <ui id="config.background.profile" type="string" class="da" data-help="Use this server-side profile when archiving reqres originating from browser&#039;s background tasks (excluding those originating from extensions).">Profile</ui>
    </div>
    <!-- backgroundOptions -->
    </div>

    <div id="extension-options">
    <!-- extensionOptions -->
    <h1>Extensions</h1>
    <div class="opts">
    <ui id="config.extension.collecting" type="boolean" class="dc" data-help="Track new reqres originating from browser extensions.">Track new reqres</ui>
    <ui id="config.extension.limbo" type="boolean" data-help="For reqres originating from browser&#039;s extensions/add-ons, put newly `finished` reqres tab that satisfy &quot;Pick reqres for archival when they finish&quot; settings into limbo until you collect them for archival or discard them manually.">Pick into limbo</ui>
    <ui id="config.extension.negLimbo" type="boolean" class="prefer-off" data-help="For reqres originating from browser&#039;s extensions/add-ons, put newly `finished` reqres tab that do NOT satisfy &quot;Pick reqres for archival when they finish&quot; settings into limbo instead of discarding them immediately. Useful for debugging.">Drop into limbo</ui>
    <ui id="config.extension.profile" type="string" class="da" data-help="Use this server-side profile when archiving reqres originating from browser extensions.">Profile</ui>
    </div>
    <!-- extensionOptions -->
    </div>

    <h1>Options</h1>
    <div id="pick-options">
    <!-- pickOptions -->
    <h2>Pick reqres for archival when they finish</h2>
    <div class="opts">
    <ui id="config.archivePartialRequest" type="boolean" class="prefer-on" data-help="Pick a finished reqres for archival even when its request body is incomplete. Enabled by default, and you probably want to keep this enabled. See the &quot;Quirks and Bugs&quot; section of the &quot;Help&quot; page for details.">... with partial POST form data</ui>
    <ui id="config.archiveCanceled" type="boolean" class="prefer-off" data-help="Pick a finished reqres for archival even when it was canceled before it was even sent (this usually means the HTTP request in question was blocked by another extension like &quot;uBlock Origin&quot;). Disabled by default because such archived reqres carry no information except that the browser tried to do a request at specified time.">... in <code>canceled</code> state</ui>
    <ui id="config.archiveNoResponse" type="boolean" class="prefer-off" data-help="Pick a finished reqres for archival even when it got no response (i.e. the request in question was interrupted before request headers were received, this usually means a networking issue). Disabled by default because such archived reqres carry no information except that the browser tried to do a request at specified time.">... in <code>no_response</code> state</ui>
    <ui id="config.archiveIncompleteResponse" type="boolean" class="prefer-off" data-help="Pick a finished reqres for archival even when its response body is incomplete (e.g. response body was interrupted in the middle by a networking issue). Disabled by default because simply reloading the page and not dealing with partial files is usually a better option.">... in <code>incomplete</code> or <code>incomplete_fc</code> state</ui>
    <ui id="config.archive1xxCodes" type="boolean" class="prefer-on" data-help="Pick a finished reqres for archival even when its HTTP response status code is `1xx`. Enabled by default.">... with <code>1xx</code> status codes</ui>
    <ui id="config.archive3xxCodes" type="boolean" class="prefer-on" data-help="Pick a finished reqres for archival even when its HTTP response status code is `3xx`. Enabled by default.">... with <code>3xx</code> status codes</ui>
    <ui id="config.archiveTransientCodes" type="boolean" class="prefer-on" data-help="Pick a finished reqres for archival even when its HTTP response status code is a transient error. Enabled by default.">... with transient server errors</ui>
    <ui id="config.archivePermanentCodes" type="boolean" class="prefer-on" data-help="Pick a finished reqres for archival even when its HTTP response status code is a permanent error. Enabled by default.">... with permanent server errors</ui>
    <ui id="config.archiveWithErrors" type="boolean" class="prefer-on" data-help="Pick a finished reqres for archival even when pWebArc encountered (non-trivial) errors while collecting it. Enabled by default because very few errors mean the data is invalid. E.g., network errors for requests aborted by other extensions, as well as parsing and rendering-related errors reported by the browser can usually be ignored.">... with reqres errors</ui>
    </div>
    <!-- pickOptions -->
    </div>

    <div id="problematic-options">
    <!-- problematicOptions -->
    <h2>Mark reqres as problematic when they finish</h2>
    <div class="opts">
    <ui id="config.markProblematicPartialRequest" type="boolean" data-help="Marke a newly finished reqres as problematic when its request body is incomplete. Enabled by default. See the &quot;Quirks and Bugs&quot; section of the &quot;Help&quot; page for details.">... with partial POST form data</ui>
    <ui id="config.markProblematicCanceled" type="boolean" class="prefer-off" data-help="Mark a newly finished reqres as problematic when it was canceled before it was even sent (this usually means the HTTP request in question was blocked by another extension like &quot;uBlock Origin&quot;). Disabled by default.">... in <code>canceled</code> state</ui>
    <ui id="config.markProblematicNoResponse" type="boolean" class="prefer-on" data-help="Mark a newly finished reqres as problematic when it got no response (i.e. the request in question was interrupted before request headers were received; this usually means a networking issue). Enabled by default.">... in <code>no_response</code> state</ui>
    <ui id="config.markProblematicIncomplete" type="boolean" class="prefer-on" data-help="Mark a newly finished reqres as problematic when its response body is incomplete (e.g. response body was interrupted in the middle by a networking issue). Enabled by default.">... in <code>incomplete</code> state</ui>
    <ui id="config.markProblematicIncompleteFC" type="boolean" class="prefer-off" data-help="Mark a newly finished reqres as problematic when it was loaded from browser's cache but its response data was not given to the extension (this only happens on Firefox-based browsers). Disabled by default because this usually means that one of the previously collected reqres had this response data archived already, if had not, you can reload the page with browser's cache disabled via `Contrlol+F5`.">... in <code>incomplete_fc</code> state</ui>
    <ui id="config.markProblematicTransientCodes" type="boolean" class="prefer-on" data-help="Mark a newly finished reqres as problematic when its HTTP response status code is a transient error. Enabled by default because this usually means that, to be properly archived, the page needs to be reloaded later.">... with transient server errors</ui>
    <ui id="config.markProblematicPermanentCodes" type="boolean" data-help="Mark a newly finished reqres as problematic when its HTTP response status code is a permanent error. Disabled by default because this usually means that reloading the page won&#039;t help.">... with permanent server errors</ui>
    <ui id="config.markProblematicWithImportantErrors" type="boolean" class="prefer-on" data-help="Mark a newly finished reqres as problematic when it had important collection errors. Currently, only errors generated by pWebArc itself (when it failed to collect the data from the browser for various reasons), are considered important. Enabled by default.">... with important reqres errors</ui>
    <ui id="config.markProblematicPickedWithErrors" type="boolean" class="prefer-on" data-help="Mark a newly finished reqres as problematic when pWebArc encountered (non-trivial) errors while collecting it and &quot;Pick reqres for archival when they finish&quot; settings picked it for archival. Enabled by default.">... with reqres errors and get <code>picked</code></ui>
    <ui id="config.markProblematicDroppedWithErrors" type="boolean" data-help="Mark a newly finished reqres as problematic when pWebArc encountered (non-trivial) errors while collecting it and &quot;Pick reqres for archival when they finish&quot; settings did NOT pick it for archival. Disabled by default because with this enabled all reqres blocked by ad-blocking extension like &quot;uBlock Origin&quot; will be marked as problematic.">... with reqres errors and get <code>dropped</code></ui>
    </div>
    <!-- problematicOptions -->
    </div>

    <div id="closed-auto-options">
    <!-- closedAutoOptions -->
    <h2>Automatic actions for recently closed tabs</h2>
    <div class="opts">
    <ui id="config.autoTimeout" type="number" class="dauto" data-help="Perform automatic actions after this many seconds after the target tab is closed.">Timeout</ui>
    <ui id="config.autoUnmarkProblematic" type="boolean" data-help="For a recently closed tab, automatically forget about problematic reqres.">Auto-unmark problematic reqres</ui>
    <ui id="config.autoPopInLimboCollect" type="boolean" data-help="For a recently closed tab, automatically collect reqres in limbo.">Auto-collect reqres in limbo</ui>
    <ui id="config.autoPopInLimboDiscard" type="boolean" class="prefer-off" data-help="For a recently closed tab, automatically discard reqres in limbo.">Auto-discard reqres in limbo</ui>
    </div>
    <!-- closedAutoOptions -->
    </div>

    <div id="history-options">
    <!-- historyOptions -->
    <h2>History</h2>
    <div class="opts">
    <ui id="config.history" type="number" data-help="Remember at most this many collected and discarded reqres in the log.">Maximum size</ui>
    </div>
    <!-- historyOptions -->
    </div>

    <!-- bigMore -->
    </div>

    <div id="notification-options">
    <!-- notificationOptions -->
    <h2>Generate desktop notifications about</h2>
    <div class="opts">
    <ui id="config.problematicNotify" type="boolean" tabindex=8 data-help="Complain when a new problematic reqres appears.">... new problematic reqres</ui>
    <div name="more">
    <!-- notifyMore -->
    <ui id="config.problematicNotifyNumber" type="number" class="dpn" data-help="Show no more than this many latest METHOD + URL lines in the generated problematic reqres notification.">... ... but no more than</ui>
    <ui id="config.limboNotify" type="boolean" class="prefer-on" data-help="Complain when too much stuff is being held in limbo.">... too much stuff in limbo</ui>
    <ui id="config.limboMaxNumber" type="number" class="dln" data-help="Start complaining when more than this number of reqres are in limbo.">... ... after #</ui>
    <ui id="config.limboMaxSize" type="number" class="dln" data-help="Start complaining when the total size of all dumps in limbo is larger than this many Megabytes.">... ... after MiB</ui>
    <ui id="config.autoNotify" type="boolean" data-help="Generate a notification when an automatic action was performed in background.">... automatic actions</ui>
    <ui id="config.archiveStuckNotify" type="boolean" class="prefer-on" data-help="Complain when some reqres are stuck in the archival queue, i.e. when the queue is not empty but archiving is disabled.">... stuck archival queue</ui>
    <ui id="config.archiveFailedNotify" type="boolean" class="prefer-on" data-help="Complain when some reqres fail to be archived to the archival server.">... archival errors</ui>
    <ui id="config.archiveDoneNotify" type="boolean" data-help="Generate an &quot;All OK&quot; notification when the archival queue becomes empty the very first time or after a previous archival failure. This exists mostly for on-boarding new users.">... newly empty archival queue</ui>
    <!-- notifyMore -->
    </div>
    </div>
    <!-- notificationOptions -->
    </div>

    <div name="more">
    <!-- uiMore -->

    <div id="ui-options">
    <h2>User Interface and Accessibility</h2>
    <div class="opts">
    <ui id="config.colorblind" type="boolean" data-help="Use bluish colors instead of greenish where possible.">Colorblind mode</ui>
    <ui id="config.pureText" type="boolean" data-help="Do not use emojis in UI labels. Makes screen readers happier.">Pure text labels</ui>
    </div>
    </div>

    <div id="firefox-workarounds">
    <h2>Workarounds for Firefox bugs</h2>
    <div class="opts">
    <ui id="config.workaroundFirefoxFirstRequest" type="boolean" data-help="Cancel and restart the very first non-background request Firefox makes. See the &quot;Quirks and Bugs&quot; section of the &quot;Help&quot; page for details.">Restart the very first request</ui>
    </div>
    </div>

    <div id="chromium-workarounds">
    <h2>Workarounds for Chromium bugs</h2>
    <div class="opts">
    <ui id="config.workaroundChromiumDebugTimeout" type="number" data-help="Wait this many seconds for Chromium to generate new debugging or webRequest events before giving up and forcefully finishing all unmatched in-flight reqres. See the &quot;Quirks and Bugs&quot; section of the &quot;Help&quot; page for details. Make this larger if your system is slow in general or if pWebArc generates duplicated reqres for the same fetched URL.">Unmatched timeout</ui>
    <ui id="config.workaroundChromiumResetRootTab" type="boolean" class="prefer-on" data-help="Reset new tabs opened via browser&#039;s &quot;New Tab&quot; browser action (new tabs created via the plus sign in the tab bar, Control+T, &quot;New Tab&quot; menu item) to the URL below. You can disable this, but then pWebArc will proceed trying to collect the first page the browser loads there, which will probably fail.">Reset new root tabs</ui>
    <ui id="config.workaroundChromiumResetRootTabURL" type="string" data-help="URL of the first page in a new tab. Setting this to `about:blank` is highly recommended.">... ... to URL</ui>
    </div>
    </div>

    <div id="debugging-options">
    <h2>Debugging</h2>
    <div class="stats">
      <div name="more" id="div-stats.errored" data-help="At the moment, the number of reqres for which pWebArc produced internal errors. Basically, the number of reqres that hit bugs in pWebArc.">
        <span>Errored</span>
        <span>
          <input type="button" id="forgetErrored" class="smaller" data-help="Forget about all these reqres." value="Forget" />
        </span>
        <span>
          <span id="stats.errored">0</span>
          (<span id="stats.errored_size">0</span>)
        </span>
      </div>
    </div>
    <div class="opts">
    <ui id="config.ephemeral" type="boolean" class="prefer-off" data-help="Make all changes to settings in this popup ephemeral from this point on. Restarting the browser or reloading the extension will reset config to the last state when this setting was off.">Ephemeral settings</ui>
    <ui id="config.debugging" type="boolean" class="prefer-off" data-help="Report lots of data into extension&#039;s debugging log (in Firefox: about:debugging; in Chromium: extension inspector). This will make things very slow and will eat lots of memory. Do not enable unless you know what you are doing.">Verbose debugging log (SLOW!)</ui>
    <ui id="config.dumping" type="boolean" class="prefer-off" data-help="Dump raw CBOR reqres dumps into extension&#039;s debugging log. Makes things even slower and eats even more memory. Do not enable unless you know what you are doing.">Dump raw CBORs into the log</ui>
    <ui id="config.snapshotAny" type="boolean" class="prefer-off" data-help="Try capturing DOM snapshots for tabs and frames with all URLs, including `about:`, `data:`, `file:`, and extension pages. If you enable this, expect to see a lot of snapshot capture errors.">Capture snapshots of all URLs</ui>
    <ui id="config.discardAll" type="boolean" class="prefer-off" data-help="Automatically discard all reqres instead of archiving them. Useful for debugging most of the machinery of pWebArc without actually archiving anything. Do not enable unless you know what you are doing.">Discard all reqres just before archival</ui>
    </div>
    </div>

    <div id="destructive-actions">
    <h2>Potentially destructive actions</h2>
    <div class="buttons"><span class="center">
      <input type="button" id="resetPersistentStats" data-help="Reset all persistent collected, discarded, picked, and dropped stats to zero." value="Reset stats!" />
      <input type="button" id="resetConfig" data-help="Reset all config options to their default values." value="Reset config!" />
    </span></div>
    </div>

    <!-- uiMore -->
    </div>

    <div class="buttons">
      <input type="button" id="showAll" tabindex=1 value="Show all" />
    </div>

    <!-- idBody -->
    </div>

    $for(libScript)$<script src="../lib/$libScript$"></script>$endfor$
    <script src="popup.js"></script>
  </body>
</html>
